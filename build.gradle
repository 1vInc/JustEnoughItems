buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
	}
}

plugins {
	id "com.matthewprenger.cursegradle" version "1.0.7"
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = version_major + '.' + version_minor + '.' + version_patch
group = "mezz.jei" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "jei_" + mcversion

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
	version += ".${System.getenv().BUILD_NUMBER}"
}

// java version
sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

minecraft {
	version = mcversion + "-" + forgeversion
	runDir = "run"
	replace '@VERSION@', project.version
	mappings = mcp_mappings
}

repositories {

}

dependencies {
	
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	// copy everything else, that's not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}

	// Move access transformers to META-INF
	rename '(.+_at.cfg)', 'META-INF/$1'
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	filePath = "changelog.html"
	untaggedName = "Current release ${project.version}"
	fromCommit = "2fe051cf727adce1be210a46f778aa8fe031331e"
	toRef =  "HEAD"
	templateContent = """
{{#tags}}
  <h3>{{name}}</h3>
  <ul>
    {{#commits}}
    <li>{{{message}}}</li>
    {{/commits}}
  </ul>
{{/tags}}
"""
}

curseforge {
	apiKey = project.hasProperty('curseforge_apikey') ? project.curseforge_apikey : '0'
	project {
		id = curse_project_id
		changelog = file('changelog.html')
		changelogType = 'html'
		releaseType = 'beta'
	}
}

afterEvaluate {
	tasks.curseforge238222.dependsOn.add(makeChangelog)
}

// prevent java 8's strict doclint for javadocs from failing builds
allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

jar {
	manifest {
		attributes 'FMLAT': 'jei_at.cfg'
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'sources'
}

task apiJar(type: Jar) {
	from sourceSets.main.allSource
	from sourceSets.main.output
	include 'mezz/jei/api/**/*'
	classifier = 'api'
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
}

task("uploadJars", dependsOn: "build") {
	description = "uploads JARs"
	if (project.hasProperty("local_maven")) {
		apply plugin: 'maven'
		uploadArchives {
			repositories {
				mavenDeployer {
					repository(url: "file://${local_maven}")
				}
			}
		}
	}
}

// Log timings per task.
class TimingsListener implements TaskExecutionListener, BuildListener {
	private Clock clock
	private timings = []

	@Override
	void beforeExecute(Task task) {
		clock = new org.gradle.util.Clock()
	}

	@Override
	void afterExecute(Task task, TaskState taskState) {
		def ms = clock.timeInMs
		timings.add([ms, task.path])
		task.project.logger.warn "${task.path} took ${ms}ms"
	}

	@Override
	void buildFinished(BuildResult result) {
		println "Task timings:"
		for (timing in timings) {
			if (timing[0] >= 50) {
				printf "%7sms  %s\n", timing
			}
		}
	}

	@Override
	void buildStarted(Gradle gradle) {}

	@Override
	void projectsEvaluated(Gradle gradle) {}

	@Override
	void projectsLoaded(Gradle gradle) {}

	@Override
	void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()